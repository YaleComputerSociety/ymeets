rules_version = '2';

// LIVE
// Currently
// service cloud.firestore {
//   match /databases/{database}/documents {
//     match /{document=**} {
//       allow read: if true; // anyone (even guest user) can read (we should be able to move this under request.auth != null, because even anonymous users have auth)
//       allow write: if request.auth != null; // logged-in users can write
//     }
//   }
// }

// UNTESTED
// Secure-er
// https://cloud.google.com/firestore/docs/security/rules-fields
// to make handling nested objects easier
// https://stackoverflow.com/questions/61978239/limit-fields-written-on-nested-object-with-firestore-security-rules
service cloud.firestore {
    match /events/{eventID} {
        // Only the creator of the event can delete it
        allow delete: if request.auth != null 
            && request.auth.uid == resource.data.details.adminAccountId; // must be creator

        allow read: if true; // anyone (even users before they log in) can read
        allow create: if request.auth != null 
            && request.auth.uid == request.resource.data.details.adminAccountId
						&& request.resource.data.keys().hasOnly(['publicId', 'details', 'participants'])
            && request.resource.data.keys().hasAll(['publicId', 'details', 'participants']); // required fields

        // Creator can update with restrictions on protected fields
        allow update: if request.auth != null 
            && request.auth.uid == resource.data.details.adminAccountId
            // Protected fields for the creator (cannot update 'adminAccountId' or 'publicId')
            && !(request.resource.data.diff(resource.data).affectedKeys().hasAny(['publicId'])) 
            // Nested 'details' fields protection
            && !(request.resource.data.details.diff(resource.data.details).affectedKeys().hasAny(['adminAccountId'])); 

        // Any other user can update with restrictions on protected fields
        allow update: if request.auth != null
            // Protected fields for non-creators (cannot update 'publicId', 'adminAccountId', etc.)
            && !(request.resource.data.diff(resource.data).affectedKeys().hasAny(['publicId'])) 
            // Nested 'details' fields protection for non-creators
            && !(request.resource.data.details.diff(resource.data.details).affectedKeys().hasAny(['adminAccountId', 'plausibleLocations', 'zoomLink'])); 

        // Participants subcollection
        match /participants/{userId} {
            allow read: if true; // anyone can read
            allow create: if request.auth != null; // logged-in users can create

            // Only the participant can update their availability
            allow update: if request.auth != null 
                && (request.auth.uid == userId
                    || (request.resource.data.accountName == resource.data.accountName)) // anonymous user matches participant
                // Protected fields for participants (cannot update 'accountId', 'email', etc.)
                && !(request.resource.data.diff(resource.data).affectedKeys().hasAny(['accountId', 'email', "name"])); 
        }
    }
}
