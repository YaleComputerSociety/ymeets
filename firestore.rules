rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
      match /events/{eventID} {
          // Only the creator of the event can delete it
          allow delete: if request.auth != null 
              && request.auth.uid == resource.data.details.adminAccountId; // must be creator

          allow read: if true; // anyone (even users before they log in) can read
          allow create: if request.auth != null 
              && request.auth.uid == request.resource.data.details.adminAccountId
              && request.resource.data.keys().hasOnly(['publicId', 'details', 'participants'])
              && request.resource.data.keys().hasAll(['publicId', 'details', 'participants']); // required fields

          // Creator can update with restrictions on protected fields
          allow update: if request.auth != null 
              && request.auth.uid == resource.data.details.adminAccountId
              // Protected fields for the creator (cannot update 'adminAccountId' or 'publicId')
              && !(request.resource.data.diff(resource.data).affectedKeys().hasAny(['publicId'])) 
              // Nested 'details' fields protection
              && !(request.resource.data.details.diff(resource.data.details).affectedKeys().hasAny(['adminAccountId'])); 

          // Any other user can update with restrictions on protected fields
          allow update: if request.auth != null
              // Protected fields for non-creators (cannot update 'publicId', 'adminAccountId', etc.)
              && !(request.resource.data.diff(resource.data).affectedKeys().hasAny(['publicId'])) 
              // Nested 'details' fields protection for non-creators
              && !(request.resource.data.details.diff(resource.data.details).affectedKeys().hasAny(['adminAccountId', 'plausibleLocations', 'zoomLink'])); 

        // Participants subcollection
        match /participants/{userId} {
              allow read: if true; // anyone can read
              allow create: if request.auth != null; // logged-in users can create

							// Only the admin can delete (use get to retrieve parent doc)
              allow delete: if request.auth.uid == get(/databases/$(database)/documents/events/$(eventID)).data.details.adminAccountId;

              // Only the participant can update their availability
              allow update: if request.auth != null 
                  && (request.auth.uid == userId
                      || (request.resource.data.accountName == resource.data.accountName)) // anonymous user matches participant
                  // Protected fields for participants (cannot update 'accountId', 'email', etc.)
                  && !(request.resource.data.diff(resource.data).affectedKeys().hasAny(['accountId', 'email', "name"])); 
          }
      }
    }
}